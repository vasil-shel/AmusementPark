#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработка проведения.
// 
// Параметры:
//  Отказ - Булево - Отказ
//  Режим - РежимПроведенияДокумента - Режим
Процедура ОбработкаПроведения(Отказ, Режим)//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ

	Движения.АктивныеПосещения.Записывать = Истина;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродажаБилетаПозицииПродажи.Номенклатура.ВидАттракциона КАК ВидАттракциона,
	|	СУММА(ПродажаБилетаПозицииПродажи.Количество * ПродажаБилетаПозицииПродажи.Номенклатура.КоличествоПосещений) КАК
	|		КоличествоПосещений,
	|	СУММА(ПродажаБилетаПозицииПродажи.Сумма) КАК Сумма,
	|	ПродажаБилетаПозицииПродажи.Ссылка.Дата КАК Период,
	|	ПродажаБилетаПозицииПродажи.Ссылка КАК Основание,
	|	ПродажаБилетаПозицииПродажи.Ссылка.Клиент,
	|	ПродажаБилетаПозицииПродажи.Номенклатура,
	|	ПродажаБилетаПозицииПродажи.Ссылка.Филиал
	|ИЗ
	|	Документ.ПродажаБилета.ПозицииПродажи КАК ПродажаБилетаПозицииПродажи
	|ГДЕ
	|	ПродажаБилетаПозицииПродажи.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ПродажаБилетаПозицииПродажи.Номенклатура.ВидАттракциона,
	|	ПродажаБилетаПозицииПродажи.Ссылка.Дата,
	|	ПродажаБилетаПозицииПродажи.Ссылка,
	|	ПродажаБилетаПозицииПродажи.Ссылка.Клиент,
	|	ПродажаБилетаПозицииПродажи.Номенклатура,
	|	ПродажаБилетаПозицииПродажи.Ссылка.Филиал
	|ИТОГИ
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаИ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоБаллов = БаллыКСписанию;
	
	Пока ВыборкаИ.Следующий() Цикл
		
		Выборка = ВыборкаИ.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Списать = Окр(БаллыКСписанию * Выборка.Сумма / ВыборкаИ.Сумма, 0);
			Списать = Мин(Списать, ВсегоБаллов);
			
			// регистр АктивныеПосещения
			Движение = Движения.АктивныеПосещения.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Выборка);
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			// регистр Продажи
			Движения.Продажи.Записывать = Истина;
			Движение = Движения.Продажи.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Выборка);
			Движение.Сумма = Выборка.Сумма - Списать;
			
			ВсегоБаллов = ВсегоБаллов - Списать;
			
		КонецЦикла;

	КонецЦикла;

	НачислитьСписатьБонусныеБаллы(Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МаксимальнаяДоляОплаты = Константы.МаксимальнаяДоляОплатыБаллами.Получить();
	СуммаПродажи = ПозицииПродажи.Итог("Сумма");
	
	Если БаллыКСписанию > 0 Тогда
		Если БаллыКСписанию > СуммаПродажи Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Списываемые баллы не должны превышать сумму продажи";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Поле = "БаллыКСписанию";
			Сообщение.Сообщить();
		КонецЕсли;
		
		Если СуммаПродажи <> 0 Тогда
			Доля = БаллыКСписанию / СуммаПродажи * 100;
			
			Если Доля > МаксимальнаяДоляОплаты Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = СтрШаблон("Доля списываемых баллов от суммы продажи больше допустимой (%1%%)", МаксимальнаяДоляОплаты);
				Сообщение.УстановитьДанные(ЭтотОбъект);
				Сообщение.Поле = "БаллыКСписанию";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Для списания баллов необходимо указать клиента";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Поле = "БаллыКСписанию";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Начислить списать бонусные баллы.
// 
// Параметры:
//  Отказ - Булево - Отказ
Процедура НачислитьСписатьБонусныеБаллы(Отказ)
	
	Движения.БонусныеБаллыКлиентов.Записывать = Истина;
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Записать();
	
	СуммаПокупокКлиента = СуммаПокупокКлиента();
	МоментВремени = Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая);
	ДоступноБаллов = Документы.ПродажаБилета.ОстатокБонусныхБалловКлиентов(Клиент, МоментВремени);
	
	Если ДоступноБаллов < БаллыКСписанию Тогда	
		
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон("Не хватает баллов к списанию. На балансе баллов: %1", ДоступноБаллов);
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "БаллыКСписанию";
		Сообщение.Сообщить();
		Возврат;

	КонецЕсли;
	
	Если БаллыКСписанию <> 0 Тогда
		
		Движение = Движения.БонусныеБаллыКлиентов.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Регистратор = Ссылка;
		Движение.Клиент = Клиент;
		Движение.СуммаБаллов = БаллыКСписанию;

	КонецЕсли;
	
	ДоляНакапливаемыхБаллов = ДоляНакапливаемыхБаллов(СуммаПокупокКлиента);
	
	БаллыКНакоплению = СуммаДокумента * ДоляНакапливаемыхБаллов / 100;
	
	Если БаллыКНакоплению > 0 Тогда
		
		Движения.БонусныеБаллыКлиентов.Записывать = Истина;
		Движение = Движения.БонусныеБаллыКлиентов.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Регистратор = Ссылка;
		Движение.Клиент = Клиент;
		Движение.СуммаБаллов = БаллыКНакоплению;
		
	КонецЕсли;
	
КонецПроцедуры

// Сумма покупок клиента.
// 
// Возвращаемое значение:
//  Число - Сумма покупок клиента
Функция СуммаПокупокКлиента()

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродажиОбороты.СуммаОборот
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, &КонецПериода,, Клиент = &Клиент) КАК ПродажиОбороты";
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СуммаОборот;
	КонецЕсли;
			
КонецФункции

// Доля накапливаемых баллов.
// 
// Параметры:
//  СуммаПокупокКлиента - Число - Сумма покупок клиента
// 
// Возвращаемое значение:
//  Число - Доля накапливаемых баллов
Функция ДоляНакапливаемыхБаллов(СуммаПокупокКлиента)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ШкалаБонуснойПрограммыДиапазоны.ПроцентНакопления
	|ИЗ
	|	РегистрСведений.ШкалаБонуснойПрограммы.СрезПоследних(&Период,) КАК ШкалаБонуснойПрограммыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ШкалаБонуснойПрограммы.Диапазоны КАК ШкалаБонуснойПрограммыДиапазоны
	|		ПО ШкалаБонуснойПрограммыСрезПоследних.Шкала = ШкалаБонуснойПрограммыДиапазоны.Ссылка
	|ГДЕ
	|	ШкалаБонуснойПрограммыДиапазоны.НижняяГраница <= &СуммаПокупок
	|	И (ШкалаБонуснойПрограммыДиапазоны.ВерхняяГраница > &СуммаПокупок
	|	ИЛИ ШкалаБонуснойПрограммыДиапазоны.ВерхняяГраница = 0)";
	Запрос.УстановитьПараметр("СуммаПокупок", СуммаПокупокКлиента);
	Запрос.УстановитьПараметр("Период", Дата);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ПроцентНакопления;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли

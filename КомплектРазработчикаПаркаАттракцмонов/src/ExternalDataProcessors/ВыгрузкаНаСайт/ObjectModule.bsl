
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Модифицированная обработка выгрузки аттракционов на сайт.'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "2025.0.1.0";
//	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
//	Команда = ПараметрыРегистрации.Команды.Добавить();
//	Команда.Представление = НСтр("ru = 'Выгрузить аттракционы на сайт'");
//	Команда.Идентификатор = "ОткрытиеФормы";
//	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
//	Команда.ПоказыватьОповещение = Истина;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Выгрузка архива аттракционов по расписанию'");
	Команда.Идентификатор = ИдентификаторКомандыВыгрузкаАрхиваПоРасписанию();
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Ложь;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Настройки выгрузки аттракционов на сайт'");
	Команда.Идентификатор = "ОткрытиеФормы";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Истина;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов(Истина, Истина);
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Обработчик серверных команд.
//
// Параметры:
//   ИдентификаторКоманды - Строка    - имя команды, определенное в функции СведенияОВнешнейОбработке().
//   ПараметрыВыполнения  - Структура - контекст выполнения команды:
//       * ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - ссылка обработки.
//           Может использоваться для чтения параметров обработки.
//           Пример см. в комментарии к функции ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы().
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполнения) Экспорт

	Ссылка = ПараметрыВыполнения.ДополнительнаяОбработкаСсылка;

	Настройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ХранилищеНастроек").Получить();
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ИмяФайла = Настройки.КаталогХраненияФайлов;
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяФайла);
		ИмяФайла = ИмяФайла + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММддЧЧммсс;") + "_export.zip";
	
		ДанныеАрхива = ПодготовитьАрхив();
		ДанныеАрхива.Записать(ИмяФайла);	
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не заданы настройки сохранения файлов'");
		
	КонецЕсли;
	
КонецПроцедуры

// Подготовить архив.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - ДвоичныеДанные - Подготовить архив
Функция ПодготовитьАрхив() Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ВыгрузНаСайт");
	
	ИмяКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяКаталога);
	Шаблон = "%1%2img%2%3.%4";
	Шаблон1 = "%1%2.%3";
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Аттракционы.Ссылка)) КАК ИД,
	|	Аттракционы.Представление КАК Аттракцион,
	|	Аттракционы.ВидАттракциона.Представление КАК ВидАттракциона,
	|	ЕСТЬNULL(АттракционыПрисоединенныеФайлы.Ссылка, ЗНАЧЕНИЕ(Справочник.АттракционыПрисоединенныеФайлы.ПустаяСсылка)) КАК
	|		Фото,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПервых.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(АттракционыПрисоединенныеФайлы.Расширение, """") КАК РасширениеФайлаФото
	|ИЗ
	|	Справочник.Аттракционы КАК Аттракционы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПервых КАК ЦеныНоменклатурыСрезПервых
	|		ПО Аттракционы.ВидАттракциона = ЦеныНоменклатурыСрезПервых.Номенклатура.ВидАттракциона
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АттракционыПрисоединенныеФайлы КАК АттракционыПрисоединенныеФайлы
	|		ПО Аттракционы.Ссылка = АттракционыПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	Аттракционы.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Аттракцион";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество(), "ВыполнениеЗапроса");
	
	ОписаниеАттракционов = Новый Массив();
	
	ДлительныеОперации.СообщитьПрогресс(33, НСтр("ru = 'Запущена выгрузка аттракционов'"));

	Пока Выборка.Следующий() Цикл
		
		ОписаниеАттракциона = Новый Структура("ИД, Аттракцион, ВидАттракциона, Цена");
		ЗаполнитьЗначенияСвойств(ОписаниеАттракциона, Выборка);
		ОписаниеАттракциона.Вставить("Фото", Неопределено);

		Если ЗначениеЗаполнено(Выборка.Фото) Тогда
			
			ДанныеФото = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Фото);
			ИмяФайла = СтрШаблон(Шаблон, ИмяКаталога, ПолучитьРазделительПути(), Выборка.ИД, Выборка.РасширениеФайлаФото);
			ДанныеФото.Записать(ИмяФайла);
			ИмяФайла = СтрШаблон(Шаблон1, ПолучитьРазделительПути(), Выборка.ИД, Выборка.РасширениеФайлаФото);
			ОписаниеАттракциона.Вставить("Фото", ИмяФайла);			

		КонецЕсли;
		
		ОписаниеАттракционов.Добавить(ОписаниеАттракциона);
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество(), "СформированКаталог");

	ИмяФайлаВыгрузки = СтрШаблон("%1%2export.json", ИмяКаталога, ПолучитьРазделительПути());
	Запись = Новый ЗаписьJSON();
	Запись.ОткрытьФайл(ИмяФайлаВыгрузки);
	ЗаписатьJSON(Запись, ОписаниеАттракционов);
	Запись.Закрыть();

	ДлительныеОперации.СообщитьПрогресс(66, НСтр("ru = 'Формируем архив...'"));
	
	ИмяФайлаАрхива = СтрШаблон("%1%2*.*", ИмяКаталога, ПолучитьРазделительПути());
	Архиватор = Новый ЗаписьZipФайла();
	Архиватор.Добавить(ИмяФайлаАрхива, , РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ДанныеАрхива = Архиватор.ПолучитьДвоичныеДанные();

	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество(), "СформированАрхив");

	УдалитьФайлы(ИмяКаталога);
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество(), "УдаленыВременныеФайлы");
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, Выборка.Количество());
	
	Возврат ДанныеАрхива;
	
КонецФункции

Функция ИдентификаторКомандыВыгрузкаАрхиваПоРасписанию() Экспорт
	Возврат "ВыгрузкаАрхиваПоРасписанию";
КонецФункции

#КонецОбласти

#КонецЕсли
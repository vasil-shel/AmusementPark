
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сгенерировать данные.
Процедура СгенерироватьДанные() Экспорт
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ТекстМакета = ПолучитьМакет("СлучайныеФИО").ПолучитьТекст();
	СписокФИО = СтрРазделить(ТекстМакета, Символы.ПС);
	СписокАттракционов = СписокАттракционов();
	СписокНоменклатуры = СписокНоменклатуры();
	КолПосетителей = СписокФИО.Количество();
	
	ДанныеПосещений.Очистить();
	
	Курсор = Период.ДатаНачала;
	
	Пока Курсор < Период.ДатаОкончания Цикл
		
		ДеньНедели = ДеньНедели(Курсор);
		
		Если ДеньНедели = 1 Тогда
			Курсор = Курсор + 86400;
			Продолжить;
		ИначеЕсли ДеньНедели > 5 Тогда
			КоэффПосетителей = 1.5;
		Иначе	
			КоэффПосетителей = 1;
		КонецЕсли;
		
		КоличествоПосетителей = ГСЧ.СлучайноеЧисло(20*КоэффПосетителей, 50*КоэффПосетителей);
		
		Для НомПосетителя = 1 По КоличествоПосетителей Цикл

			ИндексСлучайногоПосетителя = ГСЧ.СлучайноеЧисло(0, КолПосетителей-1);
			ФИО = СписокФИО[ИндексСлучайногоПосетителя];
			Посетитель = ПолучитьПосетителя(ФИО, ГСЧ);
		
			КоличествоАттракционов = ГСЧ.СлучайноеЧисло(1, 7);
			
			Для Сч = 1 По КоличествоАттракционов Цикл
				
				ИндексАттракциона = ГСЧ.СлучайноеЧисло(0, СписокАттракционов.ВГраница());
				
				СтрокаТЧ = ДанныеПосещений.Добавить();
				СтрокаТЧ.Дата = Курсор;
				СтрокаТЧ.Посетитель = Посетитель;
				СтрокаТЧ.Аттракцион = СписокАттракционов[ИндексАттракциона];
				
				СтрокиНоменклатуры = СписокНоменклатуры.НайтиСтроки(Новый Структура("Аттракцион", СтрокаТЧ.Аттракцион));
				ИндексНоменклатуры = ГСЧ.СлучайноеЧисло(0, СтрокиНоменклатуры.ВГраница());
				СтрокаТЧ.Номенклатура = СтрокиНоменклатуры[ИндексНоменклатуры].Номенклатура;				
				
			КонецЦикла;
			
		КонецЦикла;
		
		Курсор = Курсор + 86400;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Таблица.Дата,
	|	Таблица.Посетитель КАК Посетитель,
	|	ВЫРАЗИТЬ(Таблица.Аттракцион КАК Справочник.Аттракционы) КАК Аттракцион,
	|	Таблица.Номенклатура
	|ПОМЕСТИТЬ втТаблица
	|ИЗ
	|	&Таблица КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Посетитель,
	|	Аттракцион
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблица.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(АктивныеПосещенияОстатки.Основание,
	|			ЗНАЧЕНИЕ(Документ.ПродажаБилета.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ПродажаБилета.ПустаяСсылка)
	|			ТОГДА втТаблица.Дата
	|		ИНАЧЕ АктивныеПосещенияОстатки.Основание.Дата
	|	КОНЕЦ КАК ДатаПродажи,
	|	втТаблица.Посетитель КАК Посетитель,
	|	втТаблица.Аттракцион,
	|	втТаблица.Номенклатура,
	|	ЕСТЬNULL(АктивныеПосещенияОстатки.Основание, ЗНАЧЕНИЕ(Документ.ПродажаБилета.ПустаяСсылка)) КАК Основание
	|ИЗ
	|	втТаблица КАК втТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АктивныеПосещения.Остатки КАК АктивныеПосещенияОстатки
	|		ПО втТаблица.Посетитель = ЕСТЬNULL(АктивныеПосещенияОстатки.Основание.Клиент,
	|			ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка))
	|		И втТаблица.Аттракцион.ВидАттракциона = АктивныеПосещенияОстатки.ВидАттракциона
	|		И ЕСТЬNULL(АктивныеПосещенияОстатки.КоличествоПосещенийОстаток, 0) > 0
	|		И ЕСТЬNULL(АктивныеПосещенияОстатки.Основание.Проведен, ЛОЖЬ) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Запрос.УстановитьПараметр("Таблица", ДанныеПосещений.Выгрузить());
	тз = Запрос.Выполнить().Выгрузить();

	ОтборПродажа = Новый Структура("Основание", Документы.ПродажаБилета.ПустаяСсылка());
	тзПродажи = тз.Скопировать(ОтборПродажа, "Дата, ДатаПродажи, Посетитель");
	тзПродажи.Свернуть("Дата, ДатаПродажи, Посетитель");
	
	Если тзПродажи.Количество() > 0 Тогда
		
		Для Каждого СтрокаПродажи Из тзПродажи Цикл
			СтрокаПродажи.ДатаПродажи = СтрокаПродажи.Дата + ГСЧ.СлучайноеЧисло(32400, 68400);
		КонецЦикла;

		тзПродажи.Сортировать("ДатаПродажи");
		
		Для Каждого СтрокаПродажи Из тзПродажи Цикл
	
			КупитьБилет(СтрокаПродажи, тз);
			
		КонецЦикла;

	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из тз Цикл
		
		ЗарегистрироватьПосещение(СтрокаТЗ, ГСЧ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Купить билет.
// 
// Параметры: Дата - Число - Дата
// Выборка - ВыборкаИзРезультатаЗапроса - Выборка
//  СтрокаПродажи - СтрокаТаблицыЗначений - Строка продажи
//  тз - ТаблицаЗначений - Тз
// 
Процедура КупитьБилет(СтрокаПродажи, тз)
	
	МаксимальнаяДоляОплаты = Константы.МаксимальнаяДоляОплатыБаллами.Получить();
	ОстатокБаллов = Документы.ПродажаБилета.ОстатокБонусныхБалловКлиентов(СтрокаПродажи.Посетитель, СтрокаПродажи.ДатаПродажи);
	
	ДокОбъект = Документы.ПродажаБилета.СоздатьДокумент();
	ДокОбъект.Заполнить(Неопределено);
	ДокОбъект.Дата = СтрокаПродажи.ДатаПродажи;
	ДокОбъект.Клиент = СтрокаПродажи.Посетитель;
	
	Отбор = Новый Структура("Дата, Посетитель, Основание",,, Документы.ПродажаБилета.ПустаяСсылка());
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаПродажи);
	
	СтрокиТЗ = тз.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТЗ Из СтрокиТЗ Цикл
		
		СтрокаТЧ = ДокОбъект.ПозицииПродажи.Добавить();
		СтрокаТЧ.Номенклатура = СтрокаТЗ.Номенклатура;
		СтрокаТЧ.Количество = 1;
		
	КонецЦикла;
	
	тзПозиции = ДокОбъект.ПозицииПродажи.Выгрузить();
	тзПозиции.Свернуть("Номенклатура", "Количество");
	ДокОбъект.ПозицииПродажи.Загрузить(тзПозиции);
	
	Для Каждого СтрокаТЧ Из ДокОбъект.ПозицииПродажи Цикл

		СтрокаТЧ.Цена = РегистрыСведений.ЦеныНоменклатуры.ЦенаНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаПродажи.ДатаПродажи); 
		СтрокаТЧ.Сумма = СтрокаТЧ.Цена * СтрокаТЧ.Количество;
				
	КонецЦикла;
	
	СуммаИтого = ДокОбъект.ПозицииПродажи.Итог("Сумма");
	ДокОбъект.БаллыКСписанию = Мин(ОстатокБаллов, СуммаИтого * МаксимальнаяДоляОплаты / 100);
	ДокОбъект.СуммаДокумента = СуммаИтого - ДокОбъект.БаллыКСписанию; 

	Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
		
		ВызватьИсключение "Ошибка записи документа ""ПродажаБилета""";
		
	КонецЕсли;

	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Для Каждого СтрокаТЗ Из СтрокиТЗ Цикл
		СтрокаТЗ.ДатаПродажи = СтрокаПродажи.ДатаПродажи;
		СтрокаТЗ.Основание = ДокОбъект.Ссылка;
	КонецЦикла;
		
КонецПроцедуры

// Зарегистрировать посещение.
// 
// Параметры:
//  СтрокаТЗ - СтрокаТаблицыЗначений - Строка ТЗ
//  ГСЧ - ГенераторСлучайныхЧисел - ГСЧ
Процедура ЗарегистрироватьПосещение(СтрокаТЗ, ГСЧ)
	
	ДокОбъект = Документы.ПосещениеАттракциона.СоздатьДокумент();
	ДокОбъект.Заполнить(Неопределено);
	ДокОбъект.Дата = СтрокаТЗ.Основание.Дата + ГСЧ.СлучайноеЧисло(200, 2400);
	ДокОбъект.Аттракцион = СтрокаТЗ.Аттракцион;
	ДокОбъект.Основание = СтрокаТЗ.Основание;
		
	Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
		
		ВызватьИсключение "Ошибка записи документа ""ПосещениеАттракциона""";
		
	КонецЕсли;

	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

// Список аттракционов.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Аттракционы - Список аттракционов
Функция СписокАттракционов()

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Аттракционы.Ссылка
	|ИЗ
	|	Справочник.Аттракционы КАК Аттракционы
	|ГДЕ
	|	Аттракционы.ПометкаУдаления = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции

// Список номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список номенклатуры
Функция СписокНоменклатуры()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Аттракционы.Ссылка КАК Аттракцион,
	|	спрНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Аттракционы КАК Аттракционы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО Аттракционы.ВидАттракциона = спрНоменклатура.ВидАттракциона";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получить посетителя.
// 
// Параметры:
//  ФИО - Строка - ФИО
//  ГСЧ - ГенераторСлучайныхЧисел - ГСЧ
// 
// Возвращаемое значение:
//  Неопределено, СправочникСсылка.Клиенты - Получить посетителя
Функция ПолучитьПосетителя(ФИО, ГСЧ)
	
	СпрСсылка = Справочники.Клиенты.НайтиПоНаименованию(ФИО, Истина);
	
	Если СпрСсылка.Пустая() Тогда
		
		СпрОбъект = Справочники.Клиенты.СоздатьЭлемент();
		СпрОбъект.Заполнить(Неопределено);
		СпрОбъект.Наименование = ФИО;
		СпрОбъект.Телефон = СлучайныйТелефон(ГСЧ);
		
		Если Не СпрОбъект.ПроверитьЗаполнение() Тогда
			
			ВызватьИсключение "Ошибка создания клиента";
			
		КонецЕсли;
		
		СпрОбъект.Записать();
		СпрСсылка = СпрОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат СпрСсылка;
	
КонецФункции

// Случайный телефон.
// 
// Параметры:
//  ГСЧ - ГенераторСлучайныхЧисел - ГСЧ
// 
// Возвращаемое значение:
//  Строка - Случайный телефон
Функция СлучайныйТелефон(ГСЧ)
	
	Номер = "89";
	
	Для Сч = 1 По 9 Цикл
		Номер = Номер + ГСЧ.СлучайноеЧисло(0, 9);
	КонецЦикла;
	
	Возврат Номер;
	
КонецФункции

#КонецОбласти

#КонецЕсли
